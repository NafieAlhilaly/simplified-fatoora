name: Tests CI
on:
  pull_request:
    types: [opened, synchronize]

jobs:
  # TODO: enable it once prettier is run on the codebase
  # prettier:
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2
  #       with:
  #         ref: ${{ github.head_ref }}
  #     - name: Prettify code
  #       uses: creyD/prettier_action@v3.3
  #       with:
  #         prettier_version: '2.5.1'
  #         commit_message: 'chore: prettified code!'
  #         prettier_options: --ignore-unknown --write **/*.{js,ts,jsx,tsx}
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'true'
          token: ${{ secrets.ACCESS_TOKEN }}
      - name: Test using Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'
      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - run: npm ci
      # TODO: uncomment when ts is enabled
      # - run: npm run typecheck
      - run: npm run test
      - name: Tests âœ…
        if: ${{ success() }}
        run: |
          curl --request POST           --url https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }}           --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}'           --header 'content-type: application/json'           --data '{
            "context": "tests",
            "state": "success",
            "description": "Tests passed",
            "target_url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          }'
      - name: Tests ðŸš¨
        if: ${{ failure() }}
        run: |
          curl --request POST           --url https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }}           --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}'           --header 'content-type: application/json'           --data '{
            "context": "tests",
            "state": "failure",
            "description": "Tests failed",
            "target_url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          }'